@page "/commercials/{preventCancel:bool}"

@using System.Diagnostics.Eventing.Reader
@using CommercialOptimiser.App.ViewModels
@using Microsoft.Extensions.Localization
@using CommercialOptimiser.Core.Models
@using Microsoft.AspNetCore.SignalR
@inject IStringLocalizer<CommercialSelection> Resources
@inject ICommercialSelectionViewModel ViewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

@if (ViewModel.Commercials == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <header>
        <h1>@Resources["Title"]</h1>
    </header>

    <p class="very-small" />

    <div align="center">
        <div class="w3-container commercial-table">
            <table class="w3-table-all">
                <thead>
                    <tr class="w3-green">
                        <th>@Resources["CommercialTitle"]</th>
                        <th class="numeric">
                            <input type="checkbox"
                                   @bind=@ViewModel.AllSelected>
                        </th>
                    </tr>
                </thead>

                @foreach (var commercial in ViewModel.Commercials)
                {
                    <tr>
                        <td>@commercial.Commercial.Title</td>
                        <td class="numeric">
                            <input type="checkbox"
                                   id=@commercial.Commercial.Id @bind=@commercial.Checked>
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>

    <p class="very-small" />

    @if (ViewModel.SufficientCommercialsSelected)
    {
        <div align="center" class="largeHighlightedText">
            @string.Format(Resources["CommercialsSelected"],
               ViewModel.SelectedCommercialCount,
               ViewModel.BreakCapacity)
        </div>
    }
    else
    {
        <div align="center" class="largeText">
            @string.Format(Resources["CommercialsSelected"],
               ViewModel.SelectedCommercialCount,
               ViewModel.BreakCapacity)
        </div>
    }

    <p class="very-small" />

    <div align="center">
        <button class="btn btn-primary"
                disabled="@ViewModel.PreventCancel"
                @onclick="Cancel">
            @Resources["Cancel"]
        </button>

        <button class="btn btn-primary small-left-margin"
                disabled="@ViewModel.PreventOptimise"
                @onclick="OptimiseCommercialAllocationAsync">
            @Resources["OptimiseCommercialAllocation"]
        </button>
    </div>
}

@code {
    [Parameter]
    public bool PreventCancel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.InitializeAsync(PreventCancel);
    }

    private async Task OptimiseCommercialAllocationAsync()
    {
        if (ViewModel.IsBusy) return;

        ViewModel.IsBusy = true;
        try
        {
            if (!await ViewModel.OptimiseCommercialAllocationAsync())
            {
                //Not enough commercials selected
                await JsRuntime.InvokeVoidAsync("showalert",
                    CommercialOptimiser.App.Resources.Pages.CommercialSelection.AllocationFailed);
                return;
            }
        }
        catch (ArgumentException)
        {
            //Failure to allocate commercials
            await JsRuntime.InvokeVoidAsync("showalert",
                CommercialOptimiser.App.Resources.Pages.CommercialSelection.AllocationFailed);
            return;
        }
        catch (Exception)
        {
            //Problem communicating with API
            NavigationManager.NavigateTo("error");
            return;
        }
        finally
        {
            ViewModel.IsBusy = false;
        }

        NavigationManager.NavigateTo("/");
    }

    private void Cancel()
    {
        if (ViewModel.IsBusy) return;
        NavigationManager.NavigateTo("/");
    }
}